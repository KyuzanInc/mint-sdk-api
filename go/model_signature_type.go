/*
sdk_api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SignatureType the model 'SignatureType'
type SignatureType string

// List of SignatureType
const (
	FIXED_PRICE SignatureType = "ethereum-contract-erc721-shop-fixed-price"
	AUCTION_BID SignatureType = "ethereum-contract-erc721-shop-auction-bid"
	AUCTION_WITHDRAW SignatureType = "ethereum-contract-erc721-shop-auction-withdraw"
)

// All allowed values of SignatureType enum
var AllowedSignatureTypeEnumValues = []SignatureType{
	"ethereum-contract-erc721-shop-fixed-price",
	"ethereum-contract-erc721-shop-auction-bid",
	"ethereum-contract-erc721-shop-auction-withdraw",
}

func (v *SignatureType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SignatureType(value)
	for _, existing := range AllowedSignatureTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SignatureType", value)
}

// NewSignatureTypeFromValue returns a pointer to a valid SignatureType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSignatureTypeFromValue(v string) (*SignatureType, error) {
	ev := SignatureType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SignatureType: valid values are %v", v, AllowedSignatureTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SignatureType) IsValid() bool {
	for _, existing := range AllowedSignatureTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SignatureType value
func (v SignatureType) Ptr() *SignatureType {
	return &v
}

type NullableSignatureType struct {
	value *SignatureType
	isSet bool
}

func (v NullableSignatureType) Get() *SignatureType {
	return v.value
}

func (v *NullableSignatureType) Set(val *SignatureType) {
	v.value = val
	v.isSet = true
}

func (v NullableSignatureType) IsSet() bool {
	return v.isSet
}

func (v *NullableSignatureType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignatureType(val *SignatureType) *NullableSignatureType {
	return &NullableSignatureType{value: val, isSet: true}
}

func (v NullableSignatureType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignatureType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

