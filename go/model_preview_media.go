/*
 * sdk_api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 4.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PreviewMedia プレビュー用のメディア
type PreviewMedia struct {
	Url string `json:"url"`
	MimeType string `json:"mimeType"`
}

// NewPreviewMedia instantiates a new PreviewMedia object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPreviewMedia(url string, mimeType string) *PreviewMedia {
	this := PreviewMedia{}
	this.Url = url
	this.MimeType = mimeType
	return &this
}

// NewPreviewMediaWithDefaults instantiates a new PreviewMedia object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreviewMediaWithDefaults() *PreviewMedia {
	this := PreviewMedia{}
	return &this
}

// GetUrl returns the Url field value
func (o *PreviewMedia) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *PreviewMedia) GetUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *PreviewMedia) SetUrl(v string) {
	o.Url = v
}

// GetMimeType returns the MimeType field value
func (o *PreviewMedia) GetMimeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value
// and a boolean to check if the value has been set.
func (o *PreviewMedia) GetMimeTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MimeType, true
}

// SetMimeType sets field value
func (o *PreviewMedia) SetMimeType(v string) {
	o.MimeType = v
}

func (o PreviewMedia) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["mimeType"] = o.MimeType
	}
	return json.Marshal(toSerialize)
}

type NullablePreviewMedia struct {
	value *PreviewMedia
	isSet bool
}

func (v NullablePreviewMedia) Get() *PreviewMedia {
	return v.value
}

func (v *NullablePreviewMedia) Set(val *PreviewMedia) {
	v.value = val
	v.isSet = true
}

func (v NullablePreviewMedia) IsSet() bool {
	return v.isSet
}

func (v *NullablePreviewMedia) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreviewMedia(val *PreviewMedia) *NullablePreviewMedia {
	return &NullablePreviewMedia{value: val, isSet: true}
}

func (v NullablePreviewMedia) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreviewMedia) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


