/*
 * sdk_api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 4.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// NetworkId the model 'NetworkId'
type NetworkId float32

// List of NetworkId
const (
	_1 NetworkId = 1
	_4 NetworkId = 4
	_80001 NetworkId = 80001
	_137 NetworkId = 137
	_31337 NetworkId = 31337
)

var allowedNetworkIdEnumValues = []NetworkId{
	1,
	4,
	80001,
	137,
	31337,
}

func (v *NetworkId) UnmarshalJSON(src []byte) error {
	var value float32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NetworkId(value)
	for _, existing := range allowedNetworkIdEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NetworkId", value)
}

// NewNetworkIdFromValue returns a pointer to a valid NetworkId
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNetworkIdFromValue(v float32) (*NetworkId, error) {
	ev := NetworkId(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NetworkId: valid values are %v", v, allowedNetworkIdEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NetworkId) IsValid() bool {
	for _, existing := range allowedNetworkIdEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NetworkId value
func (v NetworkId) Ptr() *NetworkId {
	return &v
}

type NullableNetworkId struct {
	value *NetworkId
	isSet bool
}

func (v NullableNetworkId) Get() *NetworkId {
	return v.value
}

func (v *NullableNetworkId) Set(val *NetworkId) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkId) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkId(val *NetworkId) *NullableNetworkId {
	return &NullableNetworkId{value: val, isSet: true}
}

func (v NullableNetworkId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

