/*
sdk_api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OneOfAny - struct for OneOfAny
type OneOfAny struct {
	ArrayOfInterface{} *[]interface{}
	Bool *bool
	Float32 *float32
	Int32 *int32
	MapmapOfStringinterface{} *map[string]interface{}
	String *string
}

// []interface{}AsOneOfAny is a convenience function that returns []interface{} wrapped in OneOfAny
func ArrayOfInterface{}AsOneOfAny(v *[]interface{}) OneOfAny {
	return OneOfAny{
		ArrayOfInterface{}: v,
	}
}

// boolAsOneOfAny is a convenience function that returns bool wrapped in OneOfAny
func BoolAsOneOfAny(v *bool) OneOfAny {
	return OneOfAny{
		Bool: v,
	}
}

// float32AsOneOfAny is a convenience function that returns float32 wrapped in OneOfAny
func Float32AsOneOfAny(v *float32) OneOfAny {
	return OneOfAny{
		Float32: v,
	}
}

// int32AsOneOfAny is a convenience function that returns int32 wrapped in OneOfAny
func Int32AsOneOfAny(v *int32) OneOfAny {
	return OneOfAny{
		Int32: v,
	}
}

// map[string]interface{}AsOneOfAny is a convenience function that returns map[string]interface{} wrapped in OneOfAny
func MapmapOfStringinterface{}AsOneOfAny(v *map[string]interface{}) OneOfAny {
	return OneOfAny{
		MapmapOfStringinterface{}: v,
	}
}

// stringAsOneOfAny is a convenience function that returns string wrapped in OneOfAny
func StringAsOneOfAny(v *string) OneOfAny {
	return OneOfAny{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *OneOfAny) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfInterface{}
	err = newStrictDecoder(data).Decode(&dst.ArrayOfInterface{})
	if err == nil {
		jsonArrayOfInterface{}, _ := json.Marshal(dst.ArrayOfInterface{})
		if string(jsonArrayOfInterface{}) == "{}" { // empty struct
			dst.ArrayOfInterface{} = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfInterface{} = nil
	}

	// try to unmarshal data into Bool
	err = newStrictDecoder(data).Decode(&dst.Bool)
	if err == nil {
		jsonBool, _ := json.Marshal(dst.Bool)
		if string(jsonBool) == "{}" { // empty struct
			dst.Bool = nil
		} else {
			match++
		}
	} else {
		dst.Bool = nil
	}

	// try to unmarshal data into Float32
	err = newStrictDecoder(data).Decode(&dst.Float32)
	if err == nil {
		jsonFloat32, _ := json.Marshal(dst.Float32)
		if string(jsonFloat32) == "{}" { // empty struct
			dst.Float32 = nil
		} else {
			match++
		}
	} else {
		dst.Float32 = nil
	}

	// try to unmarshal data into Int32
	err = newStrictDecoder(data).Decode(&dst.Int32)
	if err == nil {
		jsonInt32, _ := json.Marshal(dst.Int32)
		if string(jsonInt32) == "{}" { // empty struct
			dst.Int32 = nil
		} else {
			match++
		}
	} else {
		dst.Int32 = nil
	}

	// try to unmarshal data into MapmapOfStringinterface{}
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringinterface{})
	if err == nil {
		jsonMapmapOfStringinterface{}, _ := json.Marshal(dst.MapmapOfStringinterface{})
		if string(jsonMapmapOfStringinterface{}) == "{}" { // empty struct
			dst.MapmapOfStringinterface{} = nil
		} else {
			match++
		}
	} else {
		dst.MapmapOfStringinterface{} = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfInterface{} = nil
		dst.Bool = nil
		dst.Float32 = nil
		dst.Int32 = nil
		dst.MapmapOfStringinterface{} = nil
		dst.String = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(OneOfAny)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(OneOfAny)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src OneOfAny) MarshalJSON() ([]byte, error) {
	if src.ArrayOfInterface{} != nil {
		return json.Marshal(&src.ArrayOfInterface{})
	}

	if src.Bool != nil {
		return json.Marshal(&src.Bool)
	}

	if src.Float32 != nil {
		return json.Marshal(&src.Float32)
	}

	if src.Int32 != nil {
		return json.Marshal(&src.Int32)
	}

	if src.MapmapOfStringinterface{} != nil {
		return json.Marshal(&src.MapmapOfStringinterface{})
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *OneOfAny) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfInterface{} != nil {
		return obj.ArrayOfInterface{}
	}

	if obj.Bool != nil {
		return obj.Bool
	}

	if obj.Float32 != nil {
		return obj.Float32
	}

	if obj.Int32 != nil {
		return obj.Int32
	}

	if obj.MapmapOfStringinterface{} != nil {
		return obj.MapmapOfStringinterface{}
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableOneOfAny struct {
	value *OneOfAny
	isSet bool
}

func (v NullableOneOfAny) Get() *OneOfAny {
	return v.value
}

func (v *NullableOneOfAny) Set(val *OneOfAny) {
	v.value = val
	v.isSet = true
}

func (v NullableOneOfAny) IsSet() bool {
	return v.isSet
}

func (v *NullableOneOfAny) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOneOfAny(val *OneOfAny) *NullableOneOfAny {
	return &NullableOneOfAny{value: val, isSet: true}
}

func (v NullableOneOfAny) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOneOfAny) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


