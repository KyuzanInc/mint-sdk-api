/*
sdk_api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// ContractERC721 ContractERC721のデータ
type ContractERC721 struct {
	Id string `json:"id"`
	CreateAt time.Time `json:"createAt"`
	UpdateAt time.Time `json:"updateAt"`
	Name string `json:"name"`
	ChainType ChainType `json:"chainType"`
	NetworkId NetworkId `json:"networkId"`
	Address string `json:"address"`
	InitialDeployBlockNumber float32 `json:"initialDeployBlockNumber"`
	TokenStandardType TokenStandardType `json:"tokenStandardType"`
}

// NewContractERC721 instantiates a new ContractERC721 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractERC721(id string, createAt time.Time, updateAt time.Time, name string, chainType ChainType, networkId NetworkId, address string, initialDeployBlockNumber float32, tokenStandardType TokenStandardType) *ContractERC721 {
	this := ContractERC721{}
	this.Id = id
	this.CreateAt = createAt
	this.UpdateAt = updateAt
	this.Name = name
	this.ChainType = chainType
	this.NetworkId = networkId
	this.Address = address
	this.InitialDeployBlockNumber = initialDeployBlockNumber
	this.TokenStandardType = tokenStandardType
	return &this
}

// NewContractERC721WithDefaults instantiates a new ContractERC721 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractERC721WithDefaults() *ContractERC721 {
	this := ContractERC721{}
	var tokenStandardType TokenStandardType = ERC721
	this.TokenStandardType = tokenStandardType
	return &this
}

// GetId returns the Id field value
func (o *ContractERC721) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ContractERC721) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ContractERC721) SetId(v string) {
	o.Id = v
}

// GetCreateAt returns the CreateAt field value
func (o *ContractERC721) GetCreateAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreateAt
}

// GetCreateAtOk returns a tuple with the CreateAt field value
// and a boolean to check if the value has been set.
func (o *ContractERC721) GetCreateAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreateAt, true
}

// SetCreateAt sets field value
func (o *ContractERC721) SetCreateAt(v time.Time) {
	o.CreateAt = v
}

// GetUpdateAt returns the UpdateAt field value
func (o *ContractERC721) GetUpdateAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdateAt
}

// GetUpdateAtOk returns a tuple with the UpdateAt field value
// and a boolean to check if the value has been set.
func (o *ContractERC721) GetUpdateAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdateAt, true
}

// SetUpdateAt sets field value
func (o *ContractERC721) SetUpdateAt(v time.Time) {
	o.UpdateAt = v
}

// GetName returns the Name field value
func (o *ContractERC721) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ContractERC721) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ContractERC721) SetName(v string) {
	o.Name = v
}

// GetChainType returns the ChainType field value
func (o *ContractERC721) GetChainType() ChainType {
	if o == nil {
		var ret ChainType
		return ret
	}

	return o.ChainType
}

// GetChainTypeOk returns a tuple with the ChainType field value
// and a boolean to check if the value has been set.
func (o *ContractERC721) GetChainTypeOk() (*ChainType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainType, true
}

// SetChainType sets field value
func (o *ContractERC721) SetChainType(v ChainType) {
	o.ChainType = v
}

// GetNetworkId returns the NetworkId field value
func (o *ContractERC721) GetNetworkId() NetworkId {
	if o == nil {
		var ret NetworkId
		return ret
	}

	return o.NetworkId
}

// GetNetworkIdOk returns a tuple with the NetworkId field value
// and a boolean to check if the value has been set.
func (o *ContractERC721) GetNetworkIdOk() (*NetworkId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkId, true
}

// SetNetworkId sets field value
func (o *ContractERC721) SetNetworkId(v NetworkId) {
	o.NetworkId = v
}

// GetAddress returns the Address field value
func (o *ContractERC721) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *ContractERC721) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *ContractERC721) SetAddress(v string) {
	o.Address = v
}

// GetInitialDeployBlockNumber returns the InitialDeployBlockNumber field value
func (o *ContractERC721) GetInitialDeployBlockNumber() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.InitialDeployBlockNumber
}

// GetInitialDeployBlockNumberOk returns a tuple with the InitialDeployBlockNumber field value
// and a boolean to check if the value has been set.
func (o *ContractERC721) GetInitialDeployBlockNumberOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InitialDeployBlockNumber, true
}

// SetInitialDeployBlockNumber sets field value
func (o *ContractERC721) SetInitialDeployBlockNumber(v float32) {
	o.InitialDeployBlockNumber = v
}

// GetTokenStandardType returns the TokenStandardType field value
func (o *ContractERC721) GetTokenStandardType() TokenStandardType {
	if o == nil {
		var ret TokenStandardType
		return ret
	}

	return o.TokenStandardType
}

// GetTokenStandardTypeOk returns a tuple with the TokenStandardType field value
// and a boolean to check if the value has been set.
func (o *ContractERC721) GetTokenStandardTypeOk() (*TokenStandardType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenStandardType, true
}

// SetTokenStandardType sets field value
func (o *ContractERC721) SetTokenStandardType(v TokenStandardType) {
	o.TokenStandardType = v
}

func (o ContractERC721) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["createAt"] = o.CreateAt
	}
	if true {
		toSerialize["updateAt"] = o.UpdateAt
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["chainType"] = o.ChainType
	}
	if true {
		toSerialize["networkId"] = o.NetworkId
	}
	if true {
		toSerialize["address"] = o.Address
	}
	if true {
		toSerialize["initialDeployBlockNumber"] = o.InitialDeployBlockNumber
	}
	if true {
		toSerialize["tokenStandardType"] = o.TokenStandardType
	}
	return json.Marshal(toSerialize)
}

type NullableContractERC721 struct {
	value *ContractERC721
	isSet bool
}

func (v NullableContractERC721) Get() *ContractERC721 {
	return v.value
}

func (v *NullableContractERC721) Set(val *ContractERC721) {
	v.value = val
	v.isSet = true
}

func (v NullableContractERC721) IsSet() bool {
	return v.isSet
}

func (v *NullableContractERC721) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractERC721(val *ContractERC721) *NullableContractERC721 {
	return &NullableContractERC721{value: val, isSet: true}
}

func (v NullableContractERC721) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractERC721) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


