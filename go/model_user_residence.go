/*
sdk_api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// UserResidence the model 'UserResidence'
type UserResidence string

// List of UserResidence
const (
	JP UserResidence = "jp"
	UNKNOWN UserResidence = "unknown"
)

// All allowed values of UserResidence enum
var AllowedUserResidenceEnumValues = []UserResidence{
	"jp",
	"unknown",
}

func (v *UserResidence) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserResidence(value)
	for _, existing := range AllowedUserResidenceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserResidence", value)
}

// NewUserResidenceFromValue returns a pointer to a valid UserResidence
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserResidenceFromValue(v string) (*UserResidence, error) {
	ev := UserResidence(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserResidence: valid values are %v", v, AllowedUserResidenceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserResidence) IsValid() bool {
	for _, existing := range AllowedUserResidenceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserResidence value
func (v UserResidence) Ptr() *UserResidence {
	return &v
}

type NullableUserResidence struct {
	value *UserResidence
	isSet bool
}

func (v NullableUserResidence) Get() *UserResidence {
	return v.value
}

func (v *NullableUserResidence) Set(val *UserResidence) {
	v.value = val
	v.isSet = true
}

func (v NullableUserResidence) IsSet() bool {
	return v.isSet
}

func (v *NullableUserResidence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserResidence(val *UserResidence) *NullableUserResidence {
	return &NullableUserResidence{value: val, isSet: true}
}

func (v NullableUserResidence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserResidence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

