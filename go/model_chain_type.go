/*
sdk_api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ChainType the model 'ChainType'
type ChainType string

// List of ChainType
const (
	ETHEREUM ChainType = "ethereum"
)

// All allowed values of ChainType enum
var AllowedChainTypeEnumValues = []ChainType{
	"ethereum",
}

func (v *ChainType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChainType(value)
	for _, existing := range AllowedChainTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChainType", value)
}

// NewChainTypeFromValue returns a pointer to a valid ChainType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChainTypeFromValue(v string) (*ChainType, error) {
	ev := ChainType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChainType: valid values are %v", v, AllowedChainTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChainType) IsValid() bool {
	for _, existing := range AllowedChainTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ChainType value
func (v ChainType) Ptr() *ChainType {
	return &v
}

type NullableChainType struct {
	value *ChainType
	isSet bool
}

func (v NullableChainType) Get() *ChainType {
	return v.value
}

func (v *NullableChainType) Set(val *ChainType) {
	v.value = val
	v.isSet = true
}

func (v NullableChainType) IsSet() bool {
	return v.isSet
}

func (v *NullableChainType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChainType(val *ChainType) *NullableChainType {
	return &NullableChainType{value: val, isSet: true}
}

func (v NullableChainType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChainType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

