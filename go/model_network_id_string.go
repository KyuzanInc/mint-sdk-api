/*
sdk_api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// NetworkIdString the model 'NetworkIdString'
type NetworkIdString string

// List of NetworkIdString
const (
	_1 NetworkIdString = "1"
	_4 NetworkIdString = "4"
	_80001 NetworkIdString = "80001"
	_137 NetworkIdString = "137"
	_31337 NetworkIdString = "31337"
)

// All allowed values of NetworkIdString enum
var AllowedNetworkIdStringEnumValues = []NetworkIdString{
	"1",
	"4",
	"80001",
	"137",
	"31337",
}

func (v *NetworkIdString) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NetworkIdString(value)
	for _, existing := range AllowedNetworkIdStringEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NetworkIdString", value)
}

// NewNetworkIdStringFromValue returns a pointer to a valid NetworkIdString
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNetworkIdStringFromValue(v string) (*NetworkIdString, error) {
	ev := NetworkIdString(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NetworkIdString: valid values are %v", v, AllowedNetworkIdStringEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NetworkIdString) IsValid() bool {
	for _, existing := range AllowedNetworkIdStringEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NetworkIdString value
func (v NetworkIdString) Ptr() *NetworkIdString {
	return &v
}

type NullableNetworkIdString struct {
	value *NetworkIdString
	isSet bool
}

func (v NullableNetworkIdString) Get() *NetworkIdString {
	return v.value
}

func (v *NullableNetworkIdString) Set(val *NetworkIdString) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkIdString) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkIdString) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkIdString(val *NetworkIdString) *NullableNetworkIdString {
	return &NullableNetworkIdString{value: val, isSet: true}
}

func (v NullableNetworkIdString) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkIdString) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

