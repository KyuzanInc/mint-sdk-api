/*
 * sdk_api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 4.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ItemStockPhysicalShippingInfoStatus the model 'ItemStockPhysicalShippingInfoStatus'
type ItemStockPhysicalShippingInfoStatus string

// List of ItemStockPhysicalShippingInfoStatus
const (
	SHIPPING_ADDRESS_NOT_REGISTERED ItemStockPhysicalShippingInfoStatus = "shipping-address-not-registered"
	SHIPPING_ADDRESS_REGISTERED ItemStockPhysicalShippingInfoStatus = "shipping-address-registered"
	SHIPPED ItemStockPhysicalShippingInfoStatus = "shipped"
)

var allowedItemStockPhysicalShippingInfoStatusEnumValues = []ItemStockPhysicalShippingInfoStatus{
	"shipping-address-not-registered",
	"shipping-address-registered",
	"shipped",
}

func (v *ItemStockPhysicalShippingInfoStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ItemStockPhysicalShippingInfoStatus(value)
	for _, existing := range allowedItemStockPhysicalShippingInfoStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ItemStockPhysicalShippingInfoStatus", value)
}

// NewItemStockPhysicalShippingInfoStatusFromValue returns a pointer to a valid ItemStockPhysicalShippingInfoStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewItemStockPhysicalShippingInfoStatusFromValue(v string) (*ItemStockPhysicalShippingInfoStatus, error) {
	ev := ItemStockPhysicalShippingInfoStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ItemStockPhysicalShippingInfoStatus: valid values are %v", v, allowedItemStockPhysicalShippingInfoStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ItemStockPhysicalShippingInfoStatus) IsValid() bool {
	for _, existing := range allowedItemStockPhysicalShippingInfoStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ItemStockPhysicalShippingInfoStatus value
func (v ItemStockPhysicalShippingInfoStatus) Ptr() *ItemStockPhysicalShippingInfoStatus {
	return &v
}

type NullableItemStockPhysicalShippingInfoStatus struct {
	value *ItemStockPhysicalShippingInfoStatus
	isSet bool
}

func (v NullableItemStockPhysicalShippingInfoStatus) Get() *ItemStockPhysicalShippingInfoStatus {
	return v.value
}

func (v *NullableItemStockPhysicalShippingInfoStatus) Set(val *ItemStockPhysicalShippingInfoStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableItemStockPhysicalShippingInfoStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableItemStockPhysicalShippingInfoStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemStockPhysicalShippingInfoStatus(val *ItemStockPhysicalShippingInfoStatus) *NullableItemStockPhysicalShippingInfoStatus {
	return &NullableItemStockPhysicalShippingInfoStatus{value: val, isSet: true}
}

func (v NullableItemStockPhysicalShippingInfoStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemStockPhysicalShippingInfoStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

