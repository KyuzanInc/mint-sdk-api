/*
sdk_api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// CryptoCurrencyRate struct for CryptoCurrencyRate
type CryptoCurrencyRate struct {
	CreateAt time.Time `json:"createAt"`
	UpdateAt time.Time `json:"updateAt"`
	Currency CryptoCurrencyType `json:"currency"`
	Jpy float32 `json:"jpy"`
	Eur float32 `json:"eur"`
	Usd float32 `json:"usd"`
}

// NewCryptoCurrencyRate instantiates a new CryptoCurrencyRate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCryptoCurrencyRate(createAt time.Time, updateAt time.Time, currency CryptoCurrencyType, jpy float32, eur float32, usd float32) *CryptoCurrencyRate {
	this := CryptoCurrencyRate{}
	this.CreateAt = createAt
	this.UpdateAt = updateAt
	this.Currency = currency
	this.Jpy = jpy
	this.Eur = eur
	this.Usd = usd
	return &this
}

// NewCryptoCurrencyRateWithDefaults instantiates a new CryptoCurrencyRate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCryptoCurrencyRateWithDefaults() *CryptoCurrencyRate {
	this := CryptoCurrencyRate{}
	return &this
}

// GetCreateAt returns the CreateAt field value
func (o *CryptoCurrencyRate) GetCreateAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreateAt
}

// GetCreateAtOk returns a tuple with the CreateAt field value
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyRate) GetCreateAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreateAt, true
}

// SetCreateAt sets field value
func (o *CryptoCurrencyRate) SetCreateAt(v time.Time) {
	o.CreateAt = v
}

// GetUpdateAt returns the UpdateAt field value
func (o *CryptoCurrencyRate) GetUpdateAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdateAt
}

// GetUpdateAtOk returns a tuple with the UpdateAt field value
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyRate) GetUpdateAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdateAt, true
}

// SetUpdateAt sets field value
func (o *CryptoCurrencyRate) SetUpdateAt(v time.Time) {
	o.UpdateAt = v
}

// GetCurrency returns the Currency field value
func (o *CryptoCurrencyRate) GetCurrency() CryptoCurrencyType {
	if o == nil {
		var ret CryptoCurrencyType
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyRate) GetCurrencyOk() (*CryptoCurrencyType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *CryptoCurrencyRate) SetCurrency(v CryptoCurrencyType) {
	o.Currency = v
}

// GetJpy returns the Jpy field value
func (o *CryptoCurrencyRate) GetJpy() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Jpy
}

// GetJpyOk returns a tuple with the Jpy field value
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyRate) GetJpyOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Jpy, true
}

// SetJpy sets field value
func (o *CryptoCurrencyRate) SetJpy(v float32) {
	o.Jpy = v
}

// GetEur returns the Eur field value
func (o *CryptoCurrencyRate) GetEur() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Eur
}

// GetEurOk returns a tuple with the Eur field value
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyRate) GetEurOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Eur, true
}

// SetEur sets field value
func (o *CryptoCurrencyRate) SetEur(v float32) {
	o.Eur = v
}

// GetUsd returns the Usd field value
func (o *CryptoCurrencyRate) GetUsd() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Usd
}

// GetUsdOk returns a tuple with the Usd field value
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyRate) GetUsdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Usd, true
}

// SetUsd sets field value
func (o *CryptoCurrencyRate) SetUsd(v float32) {
	o.Usd = v
}

func (o CryptoCurrencyRate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["createAt"] = o.CreateAt
	}
	if true {
		toSerialize["updateAt"] = o.UpdateAt
	}
	if true {
		toSerialize["currency"] = o.Currency
	}
	if true {
		toSerialize["jpy"] = o.Jpy
	}
	if true {
		toSerialize["eur"] = o.Eur
	}
	if true {
		toSerialize["usd"] = o.Usd
	}
	return json.Marshal(toSerialize)
}

type NullableCryptoCurrencyRate struct {
	value *CryptoCurrencyRate
	isSet bool
}

func (v NullableCryptoCurrencyRate) Get() *CryptoCurrencyRate {
	return v.value
}

func (v *NullableCryptoCurrencyRate) Set(val *CryptoCurrencyRate) {
	v.value = val
	v.isSet = true
}

func (v NullableCryptoCurrencyRate) IsSet() bool {
	return v.isSet
}

func (v *NullableCryptoCurrencyRate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCryptoCurrencyRate(val *CryptoCurrencyRate) *NullableCryptoCurrencyRate {
	return &NullableCryptoCurrencyRate{value: val, isSet: true}
}

func (v NullableCryptoCurrencyRate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCryptoCurrencyRate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


